import nextcord, datetime, json, re, httpx, certifi, os, flask
from nextcord.ext import commands
from threading import Thread
from os import system
from rgbprint import gradient_print, Color
from re import search
from secrets import token_hex
import requests, threading, os
from os import system
from time import sleep
from requests import Session
from httpx import get
from nextcord import Interaction, ButtonStyle, Embed
from nextcord.ui import View
import asyncio
from datetime import datetime, timedelta
from nextcord import Activity, ActivityType, Status
import itertools
from colorama import Fore
from time import sleep
from requests import get
from os import system
from httpx import Client
from bs4 import BeautifulSoup as bs
from user_agent import generate_user_agent
from requests import Session, post, get
from flask import Flask, render_template
from threading import Thread
app = Flask('')
@app.route('/')
def home():
  return "bot python is online!"
def index():
  return render_template("index.html")
def run():
  app.run(host='0.0.0.0', port=8080)
def high():
  t = Thread(target=run)
  t.start()
high()
token = os.environ.get('bot')
bots = token
name = os.environ.get('name')
log_channel_id = 1227929360187654255


config = json.load(open('./highzy_store_config.json', 'r', encoding='utf-8'))

bot = commands.Bot(
    command_prefix='!',
    help_command=None,
    intents=nextcord.Intents.all(),
    strip_after_prefix=True,
    case_insensitive=True, 
)

class topupModal(nextcord.ui.Modal):

    def __init__(self):
        super().__init__(title='Black Market ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô', timeout=None, custom_id='topup-modal')
        self.link = nextcord.ui.TextInput(
            label = '‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤',
            placeholder = 'https://gift.truemoney.com/campaign/?v=xxxxxxxxxxxxxxx',
            style = nextcord.TextInputStyle.short,
            required = True
        )
        self.add_item(self.link)

    async def callback(self, interaction: nextcord.Interaction):
        link = str(self.link.value).replace(' ', '')
        message = await interaction.response.send_message(content='checking.', ephemeral=True)
        if re.match(r'https:\/\/gift\.truemoney\.com\/campaign\/\?v=+[a-zA-Z0-9]{18}', link):
            voucher_hash = link.split('?v=')[1]
            response = httpx.post(
                url = f'https://gift.truemoney.com/campaign/vouchers/{voucher_hash}/redeem',
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/8a0.0.3987.149 Safari/537.36'
                },
                json = {
                    'mobile': config['phoneNumber'],
                    'voucher_hash': f'{voucher_hash}'
                },
                verify=certifi.where(),
            )
            if (response.status_code == 200 and response.json()['status']['code'] == 'SUCCESS'):
                data = response.json()
                amount = int(float(data['data']['my_ticket']['amount_baht']))
                userJSON = json.load(open('./users.json', 'r', encoding='utf-8'))
                if (str(interaction.user.id) not in userJSON):
                    userJSON[str(interaction.user.id)] = {
                        "userId": interaction.user.id,
                        "point": amount,
                        "all-point": amount,
                        "transaction": [
                            {
                                "topup": {
                                    "url": link,
                                    "amount": amount,
                                    "time": str(datetime.datetime.now())
                                }
                            }
                        ]
                    }
                else:
                    userJSON[str(interaction.user.id)]['point'] += amount
                    userJSON[str(interaction.user.id)]['all-point'] += amount
                    userJSON[str(interaction.user.id)]['transaction'].append({
                        "topup": {
                            "url": link,
                            "amount": amount,
                            "time": str(datetime.datetime.now())
                        }
                    })
                json.dump(userJSON, open('./users.json', 'w', encoding='utf-8'), indent=4, ensure_ascii=False)
                embed = nextcord.Embed(description=':Correct_03~1: **‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**', color=nextcord.Color.green())
            else:
                embed = nextcord.Embed(description='**‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**', color=nextcord.Color.red())
        else:
            embed = nextcord.Embed(description='**‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á**', color=nextcord.Color.red())
        await message.edit(content=None,embed=ephemeral)       

class sellroleView(nextcord.ui.View):

    def __init__(self, message: nextcord.Message, value: str):
        super().__init__(timeout=None)
        
        self.message = message
        self.value = value

    @nextcord.ui.button(
        emoji='<a:1_:1135481166955298907>',
        label='‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
        custom_id='already',
        style=nextcord.ButtonStyle.primary,
        row=1
    )
    async def already(self, button: nextcord.Button, interaction: nextcord.Interaction):
        roleJSON = json.load(open('./roles.json', 'r', encoding='utf-8'))
        userJSON = json.load(open('./users.json', 'r', encoding='utf-8'))
        if (str(interaction.user.id) not in userJSON):
            embed = nextcord.Embed(description="# ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", color=nextcord.Color.red())
        else:
            if (userJSON[str(interaction.user.id)]['point'] >= roleJSON[self.value]['price']):
                userJSON[str(interaction.user.id)]['point'] -= roleJSON[self.value]['price']
                userJSON[str(interaction.user.id)]['transaction'].append({
                    "payment": {
                        "roleId": self.value,
                        "time": str(datetime.now().strftime("%d/%m/%y %H:%M"))
                    }
                })
                json.dump(userJSON, open('./users.json', 'w', encoding='utf-8'), indent=4, ensure_ascii=False)
                if ('package' in self.value):
                    for roleId in roleJSON[self.value]['roleIds']:
                      try:
                          await interaction.user.add_roles(nextcord.utils.get(interaction.user.guild.roles, id = roleId))
                      except:
                            pass
                    channelLog = bot.get_channel(config['channelLog'])
                    if (channelLog):
                        embed = nextcord.Embed()
                        embed.description = f'''**Black Market ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏®**
\n> **‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô** 
\n** <@{interaction.user.id}> **

> **‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡∏®** 
\n** üí∏ {roleJSON[self.value]['price']} ‡∏ö‡∏≤‡∏ó **

> **‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠** 
\n** üõí <@&{roleJSON[self.value]["roleId"]}> **
'''
                        embed.set_footer(text=f'N. {interaction.user.name} - I. {interaction.user.id}', icon_url=interaction.user.avatar.url)
                        embed.color = 0x7300ff
                        await channelLog.send(embed=embed)
                    embed = nextcord.Embed(description=f'''**Black Market ‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**
\n> **‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô** 
\n** <@{interaction.user.id}> **

> **‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡∏®** 
\n** üí∏ {roleJSON[self.value]['price']} ‡∏ö‡∏≤‡∏ó **

> **‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠** 
\n** üõí <@&{roleJSON[self.value]["roleId"]}> **
''', color=nextcord.Color.green())
                else:
                    channelLog = bot.get_channel(config['channelLog'])
                    if (channelLog):
                        embed = nextcord.Embed()
                        embed.description = f'''**Black Market! ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏®**
\n> **‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô** 
\n** <@{interaction.user.id}> **

> **‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡∏®** 
\n** üí∏ {roleJSON[self.value]['price']} ‡∏ö‡∏≤‡∏ó **

> **‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠** 
\n** üõí <@&{roleJSON[self.value]["roleId"]}> ** _ _\n
'''
                        embed.set_footer(text=f'N. {interaction.user.name} - I. {interaction.user.id}', icon_url=interaction.user.avatar.url)
                        embed.color = 0x7300ff
                        await channelLog.send(embed=embed)
                    embed = nextcord.Embed(description=f'''**Black Market! ‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**
\n> **‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô** 
\n** <@{interaction.user.id}> **

> **‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡∏®** 
\n** üí∏ {roleJSON[self.value]['price']} ‡∏ö‡∏≤‡∏ó **

> **‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠** 
\n** üõí <@&{roleJSON[self.value]["roleId"]}> **
''', color=0x7300ff)
                    embed.set_footer(text=f'N. {interaction.user.name} - I. {interaction.user.id}', icon_url=interaction.user.avatar.url)
                    role = nextcord.utils.get(interaction.user.guild.roles, id = roleJSON[self.value]['roleId'])
                    await interaction.user.add_roles(role)
            else:
                embed = nextcord.Embed(description=f'> **‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Ç‡∏≤‡∏î‡∏≠‡∏µ‡∏Å {roleJSON[self.value]["price"] - userJSON[str(interaction.user.id)]["point"]} ‡∏ö‡∏≤‡∏ó**', color=nextcord.Color.red())
        return await self.message.edit(embed=embed, view=None, content=None)

    @nextcord.ui.button(
        emoji='<a:2_:1136812316600574022>',
        label='‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        custom_id='cancel',
        style=nextcord.ButtonStyle.red,
        row=1
    )
    async def cancel(self, button: nextcord.Button, interaction: nextcord.Interaction):
        return await self.message.edit(content='> **<a:1_:1135481166955298907> ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**',embed=None, view=None)



@bot.command()
async def dm(ctx, *, msg):
    for m in ctx.guild.members:
        try:
            await m.send(msg)
            print(f"Message sent to {m}")
        except:
            print(f"Can't send message to {m}")


class sellroleSelect(nextcord.ui.Select):

    def __init__(self):
        options = []
        roleJSON = json.load(open('./roles.json', 'r', encoding='utf-8'))
        for role in roleJSON:
            options.append(nextcord.SelectOption(
                label=roleJSON[role]['name'],
                description=roleJSON[role]['description'],
                value=role,
                emoji=roleJSON[role]['emoji']
            ))
        super().__init__(
            custom_id='select-role',
            placeholder='[ üõí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ]',
            min_values=1,
            max_values=1,
            options=options,
            row=0
        )
    async def callback(self, interaction: nextcord.Interaction):
        message = await interaction.response.send_message(content='‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...', ephemeral=True)
        selected = self.values[0]
        if ('package' in selected):
            roleJSON = json.load(open('./roles.json', 'r', encoding='utf-8'))
            embed = nextcord.Embed()
            embed.description = f'''
E {roleJSON[selected]['name']}**
'''
            await message.edit(content=None,embed=embed,view=sellroleView(message=message, value=selected))
        else:
            roleJSON = json.load(open('./roles.json', 'r', encoding='utf-8'))
            embed = nextcord.Embed()
            embed.title = '**‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏®**'
            embed.description = f'''**> <@&{roleJSON[selected]['roleId']}>**'''
            embed.color = 0x7300ff
            await message.edit(content=None,embed=embed,view=sellroleView(message=message, value=selected))
            
class Redeem(nextcord.ui.Modal):
    def __init__(self):
        super().__init__(title='Blackmarket | Redeem', timeout=None)
        self.log_channel = log_channel_id
        self.key = nextcord.ui.TextInput(label='‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå | ‡∏£‡∏±‡∏ö‡∏¢‡∏®', placeholder='‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤', required=True, custom_id='keyredeem')
        self.add_item(self.key)
    
    async def callback(self, interaction: nextcord.Interaction):
        try:
            self.log_channel = log_channel_id
            self.add_item(self.key)
            keyJSON = json.load(open(f'{self.key.value}.json', encoding='utf-8'))
            role = keyJSON['roles']
            status = keyJSON['status']

            if status == 'false':
                content = '‡∏Ñ‡∏µ‡∏¢‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!'
            else:
                for r in interaction.user.roles:
                    if f'{role}' in r.name:
                        return await interaction.response.send_message('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ - ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏¢‡∏®‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß', ephemeral=True)

                with open(f'{self.key.value}.json', 'w', encoding='utf-8') as f:
                    da = {
                        'roles': role,
                        'status': 'false'
                    }
                    f.write(json.dumps(da, indent=4))
                utils = nextcord.utils.get(interaction.guild.roles, name=f'{role}')
                
                try:
                    await interaction.user.add_roles(utils)
                except AttributeError:
                    return await interaction.response.send_message('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏®‡∏ô‡∏µ‡πâ (‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)', ephemeral=True)
                channelLogs = bot.get_channel(config['channelLogs'])
                if (channelLogs):
                        embed = nextcord.Embed()
                        embed.description = f'''**Black Market! ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå**
\n> **‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô** 
\n** <@{interaction.user.id}> **

> **‡∏¢‡∏®‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå** 
\n** {role} **
'''
                        embed.set_footer(text=f'BMK. {interaction.user.name} - I. {interaction.user.id}', icon_url=interaction.user.avatar.url)
                        embed.color = 0x7300ff
                        await channelLogs.send(embed=embed)
                        embed = nextcord.Embed(description=f'''**Black Market! ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå**
\n> **‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô** 
\n** <@{interaction.user.id}> **

> **‡∏¢‡∏®‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå** 
\n** {role} **
''', color=nextcord.Color.green())
                else:
                    channelLogs = bot.get_channel(config['channelLogs'])
                    if (channelLogs):
                        embed = nextcord.Embed()
                        embed.description = f'''**Black Market! ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå**
\n> **‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô** 
\n** <@{interaction.user.id}> **

> **‡∏¢‡∏®‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå** 
\n** {role} **
'''
                        embed.set_footer(text=f'BMK. {interaction.user.name} - I. {interaction.user.id}', icon_url=interaction.user.avatar.url)
                        embed.color = 0x7300ff
                        await channelLogs.send(embed=embed)
                    embed = nextcord.Embed(description=f'''**Black Market! ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**
\n> **‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô** 
\n** <@{interaction.user.id}> **

> **‡∏¢‡∏®‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ** 
\n** {role} **
''', color=0x7300ff)
                    embed.set_footer(text=f'BMK. {interaction.user.name} - I. {interaction.user.id}', icon_url=interaction.user.avatar.url)
                content = f'** __‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!__ **'
                

            
        except FileNotFoundError:
            content = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö!'
        
        return await interaction.response.send_message(content=content, ephemeral=True)
        
class Checkkey(nextcord.ui.Modal):
    def __init__(self):
        super().__init__('Blackmarket | Checkkey')
        self.key = nextcord.ui.TextInput(label='‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏µ‡∏¢‡πå', placeholder='‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ', required=True, custom_id='checkkey')
        self.add_item(self.key)
    
    async def callback(self, interaction: nextcord.Interaction):
        try:
            keyJSON = json.load(open(f'{self.key.value}.json', encoding='utf-8'))
            role = keyJSON['roles']
            status = keyJSON['status']

            if status == 'false':
                content = '‡∏Ñ‡∏µ‡∏¢‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!'
            else:
                for r in interaction.user.roles:
                    if status == 'true':
                      content = '‡∏Ñ‡∏µ‡∏¢‡πå‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö!'
                      return await interaction.response.send_message('# __‡∏Ñ‡∏µ‡∏¢‡πå‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö__', ephemeral=True)

                with open(f'{self.key.value}.json', 'w', encoding='utf-8') as f:
                    da = {
                        'roles': role,
                        'status': 'false'
                    }
                    f.write(json.dumps(da, indent=4))
                utils = nextcord.utils.get(interaction.guild.roles, name=f'{role}')
                
                try:
                    await interaction.user.add_roles(utils)
                except AttributeError:
                    return await interaction.response.send_message('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏®‡∏ô‡∏µ‡πâ (‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)', ephemeral=True)
                post(webhook,json={"content": f"** ‡∏Ñ‡∏∏‡∏ì <@{interaction.user.id}>/n‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå {key}/n‡∏à‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏® ‚â† {role}**"})
                content = f'‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!'
        except FileNotFoundError:
            content = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö!'
        
        return await interaction.response.send_message(content=content, ephemeral=True)        

class setupView(nextcord.ui.View):

    def __init__(self):
        super().__init__(timeout=None)
        self.log_channel_id = log_channel_id
        self.cooldowns = {}
        self.add_item(sellroleSelect())

    @nextcord.ui.button(
        emoji='<a:7y4badgesrole:1135479816280358984>',
        label=' ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô',
        custom_id='topup',
        style=nextcord.ButtonStyle.primary,
        row=1
    )
    async def topup(self, button: nextcord.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(topupModal())

    @nextcord.ui.button(
        emoji='<a:1_:1135481166955298907>',
        label=' ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô',
        custom_id='balance',
        style=nextcord.ButtonStyle.primary,
        row=1
    )
    async def balance(self, button: nextcord.Button, interaction: nextcord.Interaction):
        userJSON = json.load(open('./users.json', 'r', encoding='utf-8'))
        if (str(interaction.user.id) not in userJSON):
            embed = nextcord.Embed(description='> **‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ**', color=nextcord.Color.red())
        else:
            embed = nextcord.Embed(description=f'> ** ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {userJSON[str(interaction.user.id)]["point"]} ‡∏ö‡∏≤‡∏ó **', color=nextcord.Color.green())
        return await interaction.response.send_message(embed=embed, ephemeral=True)
        
    @nextcord.ui.button(
        emoji='<a:Q3:1155386742375985162>',
        label='‡πÄ‡∏ã‡∏ü‡∏¢‡∏®',
        custom_id='saverole',
        style=nextcord.ButtonStyle.primary,
        row=1
    )
    async def saverole(self, button: nextcord.Button, interaction: Interaction):
        user = interaction.user
        if user.id in self.cooldowns and user.id != 1153965156376776754:
            time_remaining = self.cooldowns[user.id] - datetime.now()
            if time_remaining.total_seconds() > 0:
                await interaction.response.send_message(f"> `‡∏£‡∏≠ {int(time_remaining.total_seconds() // 3600)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {int((time_remaining.total_seconds() % 3600) // 60)} ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏î‡πÄ‡∏ã‡∏ü‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ` ‚ùó", ephemeral=True)
                return
        
        role_data = [role.name for role in user.roles if "@everyone" not in role.name]
        file_path = f"role_{user.name}.json"
        with open(file_path, "w") as f:
            json.dump(role_data, f)
        
        self.cooldowns[user.id] = datetime.now() + timedelta(days=1)
        
        embed = Embed(title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ü", color=0xdddddd)
        formatted_roles = "\n".join(role_data)
        embed.add_field(name="‡∏¢‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ü", value=f"```\n{formatted_roles}```", inline=False)
        current_time = datetime.now().strftime("%d/%m/%y %H:%M")
        await interaction.send(embed=embed, ephemeral=True)

        log_channel = bot.get_channel(self.log_channel_id)
        if log_channel:
            log_embed = Embed(title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö", color=0xdddddd)
            log_embed.add_field(name="‡∏¢‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ü", value=f"```\n{formatted_roles}```", inline=False)
            log_embed.add_field(name="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ü", value=current_time, inline=False)
            log_message = f"{user.name} ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏®‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
            log_embed.set_footer(text=log_message)
            if user.avatar:
                    log_embed.set_author(name=f"{user.name} ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏®‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", icon_url=user.avatar.url)
            else:
                log_embed.set_author(name=f"{user.name} ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏®‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", icon_url=None)

            await log_channel.send(embed=log_embed)
            
    
    @nextcord.ui.button(
        emoji='<a:Emoji:1158903282572476426>',
        label='‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏µ‡∏¢‡πå',
        custom_id='checkkey',
        style=nextcord.ButtonStyle.red,
        row=1
    )
    async def checkkey(self, button: nextcord.Button, interaction: Interaction):
        await interaction.response.send_modal(Checkkey())

    @nextcord.ui.button(
        emoji='<a:34:1135479872374968391>',
        label='‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå',
        custom_id='redeemkey',
        style=nextcord.ButtonStyle.red,
        row=1
    )
    async def redeemkey(self, button: nextcord.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(Redeem())

@bot.event
async def on_ready():
  bot.add_view(setupView())
  system('cls')
  print(f"Bot {bot.user.name} is ready!")
  await bot.change_presence(activity=nextcord.Streaming(
      name='Black Market !', url='https://www.twitch.tv/example_channel'))

@bot.slash_command(
    name='setup',
    description='setup',
    guild_ids=[config['serverId']]
)
async def setup(interaction: nextcord.Interaction):
    if (interaction.user.id not in config['ownerIds']):
        return await interaction.response.send_message(content='[ERROR] No Permission For Use This Command.', ephemeral=True)
    embed = nextcord.Embed()
    embed.set_image(url='https://cdn.discordapp.com/attachments/1217085743005044786/1219002707172524162/1422685976-5cm-o.jpg?ex=6609b7bd&is=65f742bd&hm=54dbc70bfa7c8869e688cb53c320e5f17ae565f8d788068160920e3dd9245d0a&')
    embed.title = '**Black Market! ‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏®‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥**'
    embed.set_footer(text='¬© 2024 Black Market! All rights reserved', icon_url='https://cdn.discordapp.com/attachments/1217085743005044786/1219002707172524162/1422685976-5cm-o.jpg?ex=6609b7bd&is=65f742bd&hm=54dbc70bfa7c8869e688cb53c320e5f17ae565f8d788068160920e3dd9245d0a&')
    embed.color = 0x7300ff 
    await interaction.channel.send(embed=embed, view=setupView())    
    await interaction.channel.send('''>>> ** # ‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏®‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô **
    
**‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏ö‡∏≠‡∏ó‡∏î‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏°‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö**

** ‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏®‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏ã‡∏ü‡∏¢‡∏®‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö **

** ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö || @everyone || **''')
    await interaction.response.send_message(content=':Check~1:', ephemeral=True)
    

@bot.slash_command(
    name='addkey',
    description="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)"
)
async def add(interaction: nextcord.Interaction, key, role):
    if interaction.user.guild_permissions.administrator:
        with open(f'{key}.json', 'w+', encoding='utf-8') as k:
            s = {
                'roles': role,
                'status': 'true'
            }
            k.write(json.dumps(s, indent=4))
        channelLogss = bot.get_channel(config['channelLogss'])
        if (channelLogss):
                        embed = nextcord.Embed()
                        embed.description = f'''** Black Market! ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå **
\n> **‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°** 
\n** <@{interaction.user.id}> **

> **‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤** 
\n** {key} **

> **‡∏¢‡∏®‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà**
\n**{role}**
'''
                        embed.set_footer(text=f'BMK. {interaction.user.id}', icon_url=interaction.user.avatar.url)
                        embed.color = 0x7300ff
                        await channelLogss.send(embed=embed)
                        embed = nextcord.Embed(description=f'''**Black Market! ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå**
\n> **‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°** 
\n**<@{interaction.user.id}>**

> **‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤** 
\n** {key} **

> **‡∏¢‡∏®‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà**
\n**{role}**
''', color=nextcord.Color.green())
        else:
                    channelLogss = bot.get_channel(config['channelLogss'])
                    if (channelLogs):
                        embed = nextcord.Embed()
                        embed.description = f'''**Black Market! ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå**
\n> **‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°** 
\n** <@{interaction.user.id}> **

> **‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤** 
\n** {key} **

> **‡∏¢‡∏®‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà**
\n**{role}**
'''
                        embed.set_footer(text=f'BMK. {interaction.user.id}', icon_url=interaction.user.avatar.url)
                        embed.color = 0x7300ff
                        await channelLogss.send(embed=embed)
                    embed = nextcord.Embed(description=f'''**Black Market! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**
\n> **‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå** 
\n** <@{interaction.user.id}> **

> **‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤** 
\n** {key} **

> **‡∏¢‡∏®‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà**
\n**{role}**
''', color=0x7300ff)
                    embed.set_footer(text=f'BMK.{interaction.user.id}', icon_url=interaction.user.avatar.url)
        return await interaction.response.send_message('** # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö‚úÖ **', ephemeral=True)


bot.run(bots)
